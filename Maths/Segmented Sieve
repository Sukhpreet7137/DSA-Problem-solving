//Product of Primes

#include<bits/stdc++.h>
using namespace std;
int n=1000000;
bool arr[1000001];
void sieve()
{
    for (int i=1;i<=n;i++)
    {
        arr[i]=1;
    }
    for (int i=2;i*i<=n;i++)
    {
        if (arr[i]==1)
        {
            for (int j=i*i;j<=n;j+=i)
            {
                arr[j]=0;
            }
        }
    }
}
vector<int>generateprimes(int N)
{
    vector<int>ds;
    for (int i=2;i<=N;i++)
    {
        if (arr[i]==true)
        {
            ds.push_back(i);
        }
    }
    
    return ds;
}

int main()
{
    int t;
    cin>>t;
    sieve();
    while (t--)
    {
        int l,r;
        cin>>l>>r;
        //Generate primes till square root of r
        vector<int>primes=generateprimes(sqrt(r));

        // Create a dummy array of (r-l+1) and make every one as 1
        int dummy[r-l+1];
        for (int i = 0; i<r-l+1; i++)
        {
            dummy[i]=1;
        }
        

        // Mark all multipes of primes in dummmy as false

        for (auto it:primes)
        {
            int firstmultiple=(l/it)*it;
            // cout<<firstmultiple<<" ";
            if (firstmultiple<l)
            {
                firstmultiple=firstmultiple+it;
            }
            for (int j=max(firstmultiple,it*it);j<=r;j+=it)
            {
                dummy[j-l]=0;
            }
        }
        for (int i=l;i<=r;i++)
        {
            if (dummy[i-l]==1)
            {
                if(i!=1)
                cout<<i<<endl;   
            }
        }
    }
    
    return 0;
}
