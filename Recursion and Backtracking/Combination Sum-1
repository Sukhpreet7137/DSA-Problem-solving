#include <bits/stdc++.h>
using namespace std;
class Solution {
  public:
    //Function to return a list of indexes denoting the required 
    //combinations whose sum is equal to given number.
    void solve(vector<int>A,vector<int>ans,vector<vector<int>>&result,int index,int sum,int target)
    {
        if(sum==target)
        {
            sort(ans.begin(),ans.end());
            result.push_back(ans);
            return ;
        }
        if(sum>target)
        {
            return ;
        }
        if(index==A.size())
        {
            return ;
        }
        sum+=A[index];
        ans.push_back(A[index]);
        solve(A,ans,result,index,sum,target);
        sum-=A[index];
        ans.pop_back();
        while(index+1<A.size() && A[index]==A[index+1])
        {
            index++;
        }
        solve(A,ans,result,index+1,sum,target);
    }
    vector<vector<int> > combinationSum(vector<int> &A, int B) {
        sort(A.begin(),A.end());
       vector<vector<int>>result;
       vector<int>ans;
       solve(A,ans,result,0,0,B);
       sort(result.begin(),result.end());
       return result;
    }
};

//{ Driver Code Starts.
int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        vector<int> A;
        for(int i=0;i<n;i++){
            int x;
            cin>>x;
            A.push_back(x);
        }   
        int sum;
        cin>>sum;
        Solution ob;
        vector<vector<int>> result = ob.combinationSum(A, sum);
   		if(result.size()==0){
   			cout<<"Empty";
   		}
        for(int i=0;i<result.size();i++){
            cout<<'(';
            for(int j=0;j<result[i].size();j++){
                cout<<result[i][j];
                if(j<result[i].size()-1)
                    cout<<" ";
            }
            cout<<")";
        }
        cout<<"\n";
    }
}	
// } Driver Code Ends
