#include <bits/stdc++.h>
using namespace std;
class Solution
{
public:
    void solve(int &ans, vector<vector<int>> &m, int n1, int n2, vector<vector<int>> vis, int x, int y, int xd, int yd, int len)
    {
        if (x == xd && y == yd)
        {
            ans = max(ans, len);
            return;
        }
        vis[x][y] = 1;
        int newx = x + 1;
        int newy = y;
        if ((newx >= 0 && newx < n1) && (newy >= 0 && newy < n2) && vis[newx][newy] == 0 && m[newx][newy] == 1)
        {
            solve(ans, m, n1, n2, vis, newx, newy, xd, yd, len + 1);
        }

        newx = x;
        newy = y - 1;
        if ((newx >= 0 && newx < n1) && (newy >= 0 && newy < n2) && vis[newx][newy] == 0 && m[newx][newy] == 1)
        {
            solve(ans, m, n1, n2, vis, newx, newy, xd, yd, len + 1);
        }

        newx = x;
        newy = y + 1;
        if ((newx >= 0 && newx < n1) && (newy >= 0 && newy < n2) && vis[newx][newy] == 0 && m[newx][newy] == 1)
        {
            solve(ans, m, n1, n2, vis, newx, newy, xd, yd, len + 1);
        }

        newx = x - 1;
        newy = y;
        if ((newx >= 0 && newx < n1) && (newy >= 0 && newy < n2) && vis[newx][newy] == 0 && m[newx][newy] == 1)
        {
            solve(ans, m, n1, n2, vis, newx, newy, xd, yd, len + 1);
        }
        vis[x][y] = 0;
    }
    int longestPath(vector<vector<int>> matrix, int xs, int ys, int xd, int yd)
    {
        if (matrix[xs][ys] == 0)
        {
            return -1;
        }
        int n1 = matrix.size();
        int n2 = matrix[0].size();
        int ans = -1;
        vector<vector<int>> vis(n1, vector<int>(n2, 0));
        solve(ans, matrix, n1, n2, vis, xs, ys, xd, yd, 0);
        return ans;
    }
};
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n, m;
        cin >> n >> m;
        int xs, ys, xd, yd;
        cin >> xs >> ys >> xd >> yd;
        vector<vector<int>> mat(n, vector<int>(m));
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                cin >> mat[i][j];
            }
        }
        Solution ob;
        int ans = ob.longestPath(mat, xs, ys, xd, yd);
        cout << ans;
        cout << "\n";
    }
    return 0;
}
