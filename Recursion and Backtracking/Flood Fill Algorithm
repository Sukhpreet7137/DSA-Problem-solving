
#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    void solve(vector<vector<int>>& image, int x, int y,int oldColor,int newColor,int n,int m,vector<vector<int>>& result)
    {
        if(x<0 || x>=n || y<0 || y>=m || image[x][y]==newColor || result[x][y]!=oldColor)
        {
            return ;
        }
        result[x][y]=newColor;
        solve(image,x+1,y,oldColor,newColor,n,m,result);
        solve(image,x,y-1,oldColor,newColor,n,m,result);
        solve(image,x,y+1,oldColor,newColor,n,m,result);
        solve(image,x-1,y,oldColor,newColor,n,m,result);
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        vector<vector<int>>result=image;
        int n=image.size();
        int m=image[0].size();
        int oldColor=image[sr][sc];
        if(oldColor==newColor)
        {
            return image;
        }
        solve(image,sr,sc,oldColor,newColor,n,m,result);
        return result;
    }
};
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>image(n, vector<int>(m,0));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++)
				cin >> image[i][j];
		}
		int sr, sc, newColor;
		cin >> sr >> sc >> newColor;
		Solution obj;
		vector<vector<int>> ans = obj.floodFill(image, sr, sc, newColor);
		for(auto i: ans){
			for(auto j: i)
				cout << j << " ";
			cout << "\n";
		}
	}
	return 0;
}
