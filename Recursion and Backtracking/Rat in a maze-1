#include <bits/stdc++.h>
using namespace std;
class Solution{
    public:
    bool issafe(int x,int y,vector<vector<int>>&m,vector<vector<int>>vis,int n)
    {
        if((x>=0 && x<=n-1)&&(y>=0 && y<=n-1) && vis[x][y]==0 && m[x][y]==1)
        {
            return true;
        }
        return false;
    }
    void solve(int x,int y,vector<vector<int>>&m,int n,string s,vector<string>&result,vector<vector<int>>vis)
    {
        if(x==n-1 && y==n-1)
        {
            result.push_back(s);
            return ;
        }
        vis[x][y]=1;
        int newx=x+1;
        int newy=y;
        if(issafe(newx,newy,m,vis,n))
        {
            s.push_back('D');
            solve(newx,newy,m,n,s,result,vis);
            s.pop_back();
        }
        
         newx=x;
         newy=y-1;
        if(issafe(newx,newy,m,vis,n))
        {
            s.push_back('L');
            solve(newx,newy,m,n,s,result,vis);
            s.pop_back();
        }

         newx=x;
         newy=y+1;
        if(issafe(newx,newy,m,vis,n))
        {
            s.push_back('R');
            solve(newx,newy,m,n,s,result,vis);
            s.pop_back();
        }
        
         newx=x-1;
         newy=y;
        if(issafe(newx,newy,m,vis,n))
        {
            s.push_back('U');
            solve(newx,newy,m,n,s,result,vis);
            s.pop_back();
        }
        vis[x][y]=0;
        
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        
       string ans="";
       vector<string>result;
       if(m[0][0]==0)
        {
            return result;;
        }
       int x,y;
       x=y=0;
       vector<vector<int>>vis(n,vector<int>(n,0));
       solve(x,y,m,n,ans,result,vis);
    //   cout<<result.size();
       return result;
    }
};
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
