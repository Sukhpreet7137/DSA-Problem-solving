#include<bits/stdc++.h>
using namespace std;
class disjoint
{
    vector<int>parent,size,rank;
    public:
    disjoint(int n)
    {
        size.resize(n+1);
        rank.resize(n+1,0);
        parent.resize(n+1);
        for (int i=0;i<=n;i++)
        {
            parent[i]=i;
            size[i]=1;
        }
    }
    int findUpar(int node)
    {
        if (node==parent[node])
        {
            return node;
        }
        return parent[node]=findUpar(parent[node]);
    }
    void unionbyRank(int l1,int l2)
    {
        int par_U=findUpar(l1);
        int par_V=findUpar(l2);
        if(par_U==par_V)
        return ;
        if (rank[par_U]<rank[par_V])
        {
            parent[par_U]=par_V;
        }
        else if (rank[par_U]>rank[par_V])
        {
            parent[par_V]=par_U;
        }
        else
        {
            parent[par_U]=par_V;
            rank[par_V]++;
        }
    }
};
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        vector<pair<int,pair<int,int>>>edges;
        for(int i=0;i<V;i++)
        {
            for(auto it:adj[i])
            {
                int adjnode=it[0];
                int weight=it[1];
                int node=i;
                edges.push_back({weight,{node,adjnode}});
            }
        }
        disjoint d(V);
        int sum=0;
        sort(edges.begin(),edges.end());
        for(auto it:edges)
        {
            int wt=it.first;
            int u=it.second.first;
            int v=it.second.second;
            if(d.findUpar(u)!=d.findUpar(v))
            {
                sum+=wt;
                d.unionbyRank(u,v);
            }
        }
        return sum;
    }
};
int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}


