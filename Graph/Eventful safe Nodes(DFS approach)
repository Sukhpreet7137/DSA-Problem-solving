#include <bits/stdc++.h>
using namespace std;
class Solution
{
public:
    bool dfs(int i, int vis[], int dfsvis[], vector<int> adj[], int check[])
    {
        vis[i] = 1;
        dfsvis[i] = 1;
        check[i] = 0;
        for (auto adjnode : adj[i])
        {
            if (!vis[adjnode])
            {
                bool answer = dfs(adjnode, vis, dfsvis, adj, check);
                if (answer)
                {
                    check[i] = 0;
                    return true;
                }
            }
            else if (dfsvis[adjnode])
            {
                check[i] = 0;
                return true;
            }
        }
        check[i] = 1;
        dfsvis[i] = 0;
        return false;
    }
    vector<int> eventualSafeNodes(int V, vector<int> adj[])
    {
        int vis[V] = {0};
        int dfsvis[V] = {0};
        int check[V] = {0};
        vector<int> result;
        for (int i = 0; i < V; i++)
        {
            if (!vis[i])
            {
                dfs(i, vis, dfsvis, adj, check);
            }
        }
        for (int i = 0; i < V; i++)
        {
            if (check[i] == 1)
            {
                result.push_back(i);
            }
        }
        return result;
    }
};
int main()
{
    int t;
    cin >> t;
    while (t--)
    {

        int V, E;
        cin >> V >> E;
        vector<int> adj[V];

        for (int i = 0; i < E; i++)
        {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        vector<int> safeNodes = obj.eventualSafeNodes(V, adj);
        for (auto i : safeNodes)
        {
            cout << i << " ";
        }
        cout << endl;
    }
}
