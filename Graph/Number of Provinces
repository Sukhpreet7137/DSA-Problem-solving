class Solution {
  public:
  void bfs(int V, int vis[],vector<int> adj[]) {
        queue<int>q;
        q.push(V);
        vis[V]=1;
        while(!q.empty())
        {
            int tp=q.front();
            q.pop();
            for(auto adjnode:adj[tp])
            {
                if(!vis[adjnode])
                {
                    vis[adjnode]=1;
                    q.push(adjnode);
                }
            }
        }
    }
    int numProvinces(vector<vector<int>> adj2, int V) {
        vector<int>adj[V];
        for(int i=0;i<adj2.size();i++)
        {
            for(int j=0;j<adj2[i].size();j++)
            {
                if(adj2[i][j]==1 && i!=j)
                {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int cnt=0;
        int vis[V]={0};
        for(int i=0;i<V;i++)
        {
            if(!vis[i])
            {
                bfs(i,vis,adj);
                cnt++;
            }
        }
        return cnt;
  
