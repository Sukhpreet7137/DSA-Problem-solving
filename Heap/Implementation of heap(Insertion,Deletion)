#include<iostream>
using namespace std;
class heap
{
    int arr[100];
    int size=0;

    public:
    void insertion(int val)
    {
        size=size+1;
        int index=size;
        arr[index]=val;
        while (index>1)
        {
            int parent=index/2;
            if(arr[parent]<arr[index]) //Max heap
            // if(arr[parent]<arr[index])  //<--Min heap 
            {
                swap(arr[parent],arr[index]);
                index=parent;
            }
            else
            {
                return ;
            }
        }
        
    }
    void deleteNode()
    {
        if (size==0)
        {
            cout<<"Heap is empty"<<endl;
        }
        else{
            arr[1]=arr[size];
            size--;
            int i=1;
            while (i<size)
            {
                int leftchild=2*i;
                int rightchild=2*i+1;

               
                if (leftchild<size && arr[i]<arr[leftchild])
                {
                    swap(arr[leftchild],arr[i]);
                    i=leftchild;
                }
                else if (rightchild<size && arr[i]<arr[rightchild])
                {
                    swap(arr[rightchild],arr[i]);
                    i=rightchild;
                }
                else{
                    return ;
                }
            }
            
        }
        
    }
    void print()
    {
        for (int i=1;i<=size;i++)
        {
            cout<<arr[i]<<" ";
        }
        cout<<endl;
    }
};
int main()
{
    heap *hp=new heap();
    hp->insertion(34);
    hp->insertion(2);
    hp->insertion(3);
    hp->insertion(22);
    hp->insertion(4);
    hp->insertion(21);
    hp->print();
    hp->deleteNode();
    hp->deleteNode();
    hp->print();
    return 0;
}
